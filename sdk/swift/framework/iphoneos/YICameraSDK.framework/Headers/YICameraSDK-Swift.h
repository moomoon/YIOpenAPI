// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum LiveVideoResolution : NSInteger;
enum LiveVideoBitrate : NSInteger;
@class CIImage;
@class NSURLSession;
@class NSURLSessionDownloadTask;
@class NSURLSessionTask;

/// Present an YI action camera.
/// This class presents an YI action camera. App can invoke its functions to control the camera.
/// Like start recording, stop recording, take picture, read settings, set settings, etc. Before
/// operating an camera, App need invoke <code>ActionCamera.connect(connectionString:)</code> to connect to the camera.
/// After connect success (<code>ActionCameraListener.onConnected()</code> will be invoked), app can invoke other functions.
/// Whenever app wants to disconnect from the camera, app can invoke <code>ActionCamera.disconnect()</code>.
/// Any <code>success</code> or <code>fail</code> callback in commands are optional parameter. If you don’t care command
/// execution result, you can pass <code>nil</code>.
SWIFT_CLASS("_TtC11YICameraSDK12ActionCamera")
@interface ActionCamera : NSObject <NSURLSessionDelegate, NSURLSessionDownloadDelegate, NSURLSessionTaskDelegate>
/// Connect to a YI action camera.
/// Invoke this function to connect to a YI action camera. Param <code>connectionString</code> represents
/// the address of the remote camera. Format is:
/// \code
/// tcp:<ip address>:<port>
///
/// \endcodeIf the camera has been connected or the previous connect operation hasn’t been finished.
/// Nothing will happen. Otherwise connect operation will be executed asynchronously. If success,
/// <code>ActionCameraListener.onConnected()</code> callback will be invoked. If fail,
/// <code>ActionCameraListener.onClosed(error:)</code> callback will be invoked and parameter <code>error</code>
/// will be set.
- (void)connectWithConnectionString:(NSString * _Nonnull)connectionString;
/// Get rtsp url of camera. If camera is not connected, will return nil.
- (NSString * _Nullable)getRtspURL SWIFT_WARN_UNUSED_RESULT;
/// Cancel current download task.
- (ActionCamera * _Nonnull)cancelDownlad SWIFT_WARN_UNUSED_RESULT;
/// Build QR code for doing live video
/// \param ssid The SSID of the WIFI.
///
/// \param password The password of the WIFI.
///
/// \param resolution The resolution of live broadcast.
///
/// \param bitrate The bitrate of live broadcast.
///
/// \param duration The duration of live broadcast (unit is second). 0 means forever.
///
/// \param rtmpUrl The rtmp url of live broadcast. Should be started with “rtmp://”.
///
- (CIImage * _Nullable)buildLiveVideoQRCodeWithSsid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password resolution:(enum LiveVideoResolution)resolution bitrate:(enum LiveVideoBitrate)bitrate duration:(NSInteger)duration rtmpUrl:(NSString * _Nonnull)rtmpUrl error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
/// Disconnect from YI action camera.
/// Invoke this function to disconnect from a YI action camera. This function will return
/// immediately and the disconnect operation will be executed asynchronously. All pending
/// commands will be cancelled (the <code>fail</code> callback of the command will be invoked and the
/// code of <code>error</code> parameter will be set to <code>ErrorCode.Cancelled</code>). At the end,
/// <code>ActionCameraListener.onClosed(error:)</code> callback will be invoked and <code>error</code> parameter
/// will be set to <code>nil</code>.
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Stop view finder.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)stopViewFinderWithSuccess:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end

enum VideoResolution : NSInteger;

@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Get current video resolution.
/// \param success If command executes success, this callback will be invoked and parameter is
/// current video resolution.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoResolutionWithResolution:(enum VideoResolution)resolution success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Take a picture on camera.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)capturePhotoWithSuccess:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Stop recording on camera.
/// \param success If command executes success, this callback wil be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)stopRecordingWithSuccess:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end

enum CameraStatus : NSInteger;
@class YICameraSDKError;

@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Get camera current status.
/// \param success If command executes success, this callback will be invoked and parameter is
/// current status of camera.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getStatusWithSuccess:(void (^ _Nullable)(enum CameraStatus))success fail:(void (^ _Nullable)(YICameraSDKError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end

enum PhotoResolution : NSInteger;

@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Get current photo resolution.
/// \param success If command executes success, this callback will be invoked and parameter is
/// current photo size.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getPhotoResolutionWithSuccess:(void (^ _Nullable)(enum PhotoResolution))success fail:(void (^ _Nullable)(YICameraSDKError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Get current video resolution.
/// \param success If command executes success, this callback will be invoked and parameter is
/// current video resolution.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoResolutionWithSuccess:(void (^ _Nullable)(enum VideoResolution))success fail:(void (^ _Nullable)(YICameraSDKError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end

enum SystemMode : NSInteger;

@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Set camera system mode.
/// \param mode System mode supported by YI action camera.
///
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setSystemModeWithMode:(enum SystemMode)mode success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end

@class ActionCameraSettings;

@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Get camera settings.
/// \param success If command executes success, this callback will be invoked and parameter is
/// the settings of camera.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getSettingsWithSuccess:(void (^ _Nullable)(ActionCameraSettings * _Nonnull))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Get current photo resolution.
/// \param success If command executes success, this callback will be invoked and parameter is
/// current video resolution.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setPhotoResolutionWithPhotoResolution:(enum PhotoResolution)photoResolution success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Delete file from camera.
/// \param fileName Filename you want to delete from camera.
///
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)deleteFileWithFileName:(NSString * _Nonnull)fileName success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Set datetime to camera.
/// \param datetime The datetime you want to set to camera.
///
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setDateTimeWithDatetime:(NSDate * _Nonnull)datetime success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Format sd card.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)formatSDCardWithSuccess:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Start view finder.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)startViewFinderWithSuccess:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
@end


@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Start recording immediately.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)startRecordingWithSuccess:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Start recording at specific time.
/// \param hour Start recording at this hour.
///
/// \param minute Start recording at this minute.
///
/// \param second Start recording at this second.
///
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)startRecordingWithHour:(NSInteger)hour minute:(NSInteger)minute second:(NSInteger)second success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end

enum WhiteBalance : NSInteger;
enum ISO : NSInteger;
enum ExposureValue : NSInteger;
enum ShutterTime : NSInteger;
enum FieldOfView : NSInteger;
enum MeteringMode : NSInteger;
enum Quality : NSInteger;
enum ColorMode : NSInteger;
enum Sharpness : NSInteger;
enum ToggleState : NSInteger;
enum Timestamp : NSInteger;
enum LEDMode : NSInteger;
enum VideoStandard : NSInteger;
enum ScreenAutoLock : NSInteger;
enum AutoPowerOff : NSInteger;
enum VideoRotateMode : NSInteger;
enum BuzzerVolume : NSInteger;
enum RecordMode : NSInteger;
enum CaptureMode : NSInteger;
enum TimeLapseVideoInterval : NSInteger;
enum TimeLapsePhotoInterval : NSInteger;
enum TimeLapseVideoDuration : NSInteger;

@interface ActionCamera (SWIFT_EXTENSION(YICameraSDK))
/// Get photo white balance.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getPhotoWhiteBalanceWithSuccess:(void (^ _Nullable)(enum WhiteBalance))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set photo white balance.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setPhotoWhiteBalanceWithWhiteBalance:(enum WhiteBalance)whiteBalance success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get video white balance.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoWhiteBalanceWithSuccess:(void (^ _Nullable)(enum WhiteBalance))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set video white balance.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoWhiteBalanceWithWhiteBalance:(enum WhiteBalance)whiteBalance success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get photo iso.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getPhotoISOWithSuccess:(void (^ _Nullable)(enum ISO))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set photo iso.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setPhotoISOWithIso:(enum ISO)iso success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get video iso.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoISOWithSuccess:(void (^ _Nullable)(enum ISO))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set video iso.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoISOWithIso:(enum ISO)iso success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get photo exposure value.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getPhotoExposureValueWithSuccess:(void (^ _Nullable)(enum ExposureValue))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set photo exposure value.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setPhotoExposureValueWithEv:(enum ExposureValue)ev success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get video exposure value.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoExposureValueWithSuccess:(void (^ _Nullable)(enum ExposureValue))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set video exposure value.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoExposureValueWithEv:(enum ExposureValue)ev success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get photo shutter time.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getPhotoShutterTimeWithSuccess:(void (^ _Nullable)(enum ShutterTime))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set photo shutter time.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setPhotoShutterTimeWithShutterTime:(enum ShutterTime)shutterTime success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get video field of view.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoFieldOfViewWithSuccess:(void (^ _Nullable)(enum FieldOfView))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set video field of view.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoFieldOfViewWithFieldOfView:(enum FieldOfView)fieldOfView success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get metering mode.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getMeteringModeWithSuccess:(void (^ _Nullable)(enum MeteringMode))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set metering mode.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setMeteringModeWithMeteringMode:(enum MeteringMode)meteringMode success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get video quality.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoQualityWithSuccess:(void (^ _Nullable)(enum Quality))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set video quality.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoQualityWithQuality:(enum Quality)quality success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get video color mode.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoColorModeWithSuccess:(void (^ _Nullable)(enum ColorMode))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set video quality.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoColorModeWithColorMode:(enum ColorMode)colorMode success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get photo color mode.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getPhotoColorModeWithSuccess:(void (^ _Nullable)(enum ColorMode))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set photo color mode.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setPhotoColorModeWithColorMode:(enum ColorMode)colorMode success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get video sharpness.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoSharpnessWithSuccess:(void (^ _Nullable)(enum Sharpness))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set video sharpness.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoSharpnessWithSharpness:(enum Sharpness)sharpness success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get photo sharpness.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getPhotoSharpnessWithSuccess:(void (^ _Nullable)(enum Sharpness))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set photo sharpness.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setPhotoSharpnessWithSharpness:(enum Sharpness)sharpness success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get electronic image stabilization state.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getElectronicImageStabilizationStateWithSuccess:(void (^ _Nullable)(enum ToggleState))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set electronic image stabilization state.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setElectronicImageStabilizationStateWithState:(enum ToggleState)state success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get video timestamp setting.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoTimestampWithSuccess:(void (^ _Nullable)(enum Timestamp))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set video timestamp setting.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoTimestampWithTimestamp:(enum Timestamp)timestamp success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get photo timestamp setting.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getPhotoTimestampWithSuccess:(void (^ _Nullable)(enum Timestamp))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set photo timestamp setting.
/// \param success If command executes success, this callback will be invoked.
///
/// \param fail If command executes fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setPhotoTimestampWithTimestamp:(enum Timestamp)timestamp success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get video mute state.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoMuteStateWithSuccess:(void (^ _Nullable)(enum ToggleState))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set video mute state.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoMuteStateWithState:(enum ToggleState)state success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get LED mode.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getLEDModeWithSuccess:(void (^ _Nullable)(enum LEDMode))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set LED mode.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setLEDModeWithLedMode:(enum LEDMode)ledMode success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get video standard.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoStandardWithSuccess:(void (^ _Nullable)(enum VideoStandard))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set video standard.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoStandardWithVideoStandard:(enum VideoStandard)videoStandard success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get screen auto lock
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getScreenAutoLockWithSuccess:(void (^ _Nullable)(enum ScreenAutoLock))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set screen auto lock.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setScreenAutoLockWithScreenAutoLock:(enum ScreenAutoLock)screenAutoLock success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get auto power off.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getAutoPowerOffWithSuccess:(void (^ _Nullable)(enum AutoPowerOff))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set auto power off.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setAutoPowerOffWithAutoPowerOff:(enum AutoPowerOff)autoPowerOff success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get video rotate mode.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getVideoRotateModeWithSuccess:(void (^ _Nullable)(enum VideoRotateMode))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set video rotate mode.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setVideoRotateModeWithMode:(enum VideoRotateMode)mode success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get buzzer volume.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getBuzzerVolumeWithSuccess:(void (^ _Nullable)(enum BuzzerVolume))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set buzzer volume.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setBuzzerVolumeWithBuzzerVolume:(enum BuzzerVolume)buzzerVolume success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get record mode.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getRecordModeWithSuccess:(void (^ _Nullable)(enum RecordMode))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set record mode.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setRecordModeWithRecordMode:(enum RecordMode)recordMode success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get capture mode.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getCaptureModeWithSuccess:(void (^ _Nullable)(enum CaptureMode))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set capture mode.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setCaptureModeWithCaptureMode:(enum CaptureMode)captureMode success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get time lapse video interval.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getTimeLapseVideoIntervalWithSuccess:(void (^ _Nullable)(enum TimeLapseVideoInterval))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set time lapse video interval.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setTimeLapseVideoIntervalWithInterval:(enum TimeLapseVideoInterval)interval success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get time lapse photo interval.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getTimeLapsePhotoIntervalWithSuccess:(void (^ _Nullable)(enum TimeLapsePhotoInterval))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set time lapse video interval.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setTimeLapsePhotoIntervalWithInterval:(enum TimeLapsePhotoInterval)interval success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Get time lapse video duration.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)getTimeLapseVideoDurationWithSuccess:(void (^ _Nullable)(enum TimeLapseVideoDuration))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
/// Set time lapse video duration.
/// \param success If command execute success, this callback will be invoked.
///
/// \param fail If command execute fail, this callback will be invoked.
///
- (ActionCamera * _Nonnull)setTimeLapseVideoDurationWithDuration:(enum TimeLapseVideoDuration)duration success:(void (^ _Nullable)(void))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


/// Define the camera settings.
SWIFT_CLASS("_TtC11YICameraSDK20ActionCameraSettings")
@interface ActionCameraSettings : NSObject
/// Current status.
@property (nonatomic) enum CameraStatus status;
/// Current datetime of camera.
@property (nonatomic, copy) NSDate * _Nullable clock;
/// Current software version.
@property (nonatomic, copy) NSString * _Nullable softwareVersion;
/// Current hardware version.
@property (nonatomic, copy) NSString * _Nullable hardwareVersion;
/// Serial number of camera.
@property (nonatomic, copy) NSString * _Nullable serialNumber;
/// Product name of camera.
@property (nonatomic, copy) NSString * _Nullable productName;
/// Current mode of camera.
@property (nonatomic) enum SystemMode systemMode;
/// Current video standard.
@property (nonatomic) enum VideoStandard videoStandard;
/// Current video resolution.
@property (nonatomic) enum VideoResolution videoResolution;
/// Current video quality.
@property (nonatomic) enum Quality videoQuality;
/// Current picture resolution.
@property (nonatomic) enum PhotoResolution photoResolution;
/// Current photo white balance.
@property (nonatomic) enum WhiteBalance photoWhiteBalance;
/// Current video white balance.
@property (nonatomic) enum WhiteBalance videoWhiteBalance;
/// Current photo iso.
@property (nonatomic) enum ISO photoISO;
/// Current video iso.
@property (nonatomic) enum ISO videoISO;
/// Current photo exposure value.
@property (nonatomic) enum ExposureValue photoExposureValue;
/// Current video exposure value.
@property (nonatomic) enum ExposureValue videoExposureValue;
/// Current photo shutter time.
@property (nonatomic) enum ShutterTime photoShutterTime;
/// Current video field of view.
@property (nonatomic) enum FieldOfView videoFieldOfView;
/// Current metering mode.
@property (nonatomic) enum MeteringMode meteringMode;
/// Current video color mode.
@property (nonatomic) enum ColorMode videoColorMode;
/// Current photo color mode.
@property (nonatomic) enum ColorMode photoColorMode;
/// Current video sharpness.
@property (nonatomic) enum Sharpness videoSharpness;
/// Current photo sharpness.
@property (nonatomic) enum Sharpness photoSharpness;
/// Is electronic image stabilization enabled.
@property (nonatomic) enum ToggleState electronicImageStabilizationState;
/// Current video timestamp.
@property (nonatomic) enum Timestamp videoTimestamp;
/// Current photo timestamp.
@property (nonatomic) enum Timestamp photoTimestamp;
/// Is video mute enabled.
@property (nonatomic) enum ToggleState videoMuteState;
/// LED mode
@property (nonatomic) enum LEDMode ledMode;
/// ScreenAutoLock
@property (nonatomic) enum ScreenAutoLock screenAutoLock;
/// AutoPowerOff
@property (nonatomic) enum AutoPowerOff autoPowerOff;
/// VideoRotateMode
@property (nonatomic) enum VideoRotateMode videoRotateMode;
/// BuazzerVolume
@property (nonatomic) enum BuzzerVolume buzzerVolume;
/// RecordMode
@property (nonatomic) enum RecordMode recordMode;
/// CaptureMode
@property (nonatomic) enum CaptureMode captureMode;
/// Time lapse video interval
@property (nonatomic) enum TimeLapseVideoInterval timeLapseVideoInterval;
/// Time lapse photo interval
@property (nonatomic) enum TimeLapsePhotoInterval timeLapsePhotoInterval;
/// Time lapse video duration
@property (nonatomic) enum TimeLapseVideoDuration timeLapseVideoDuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// Contains values that specify the AutoPowerOff of a camera.
typedef SWIFT_ENUM(NSInteger, AutoPowerOff) {
/// Unknown
  AutoPowerOffUnknown = 0,
/// Off
  AutoPowerOffA_Off = 1,
/// 3 minutes
  AutoPowerOffA_3m = 2,
/// 5 minutes
  AutoPowerOffA_5m = 3,
/// 10 minutes
  AutoPowerOffA_10m = 4,
};

/// Contains values that specify the BuzzerVolume of a camera.
typedef SWIFT_ENUM(NSInteger, BuzzerVolume) {
/// Unknown
  BuzzerVolumeUnknown = 0,
/// High
  BuzzerVolumeHigh = 1,
/// Low
  BuzzerVolumeLow = 2,
/// Mute
  BuzzerVolumeMute = 3,
};

/// Contains values that specify the CameraStatus of a camera.
typedef SWIFT_ENUM(NSInteger, CameraStatus) {
/// Unknown.
  CameraStatusUnknown = 0,
/// Camera is idle.
  CameraStatusIdle = 1,
/// Camera is recording.
  CameraStatusRecording = 2,
/// RTSP service is started.
  CameraStatusViewFinderStarted = 3,
};

/// Contains values that specify the CaptureMode of a camera.
typedef SWIFT_ENUM(NSInteger, CaptureMode) {
/// Unknown
  CaptureModeUnknown = 0,
/// Normal
  CaptureModeNormal = 1,
/// Timelapse
  CaptureModeTimelapse = 2,
};

/// Contains values that specify the ColorMode of a camera.
typedef SWIFT_ENUM(NSInteger, ColorMode) {
/// Unknown
  ColorModeUnknown = 0,
/// YI Color
  ColorModeYIColor = 1,
/// Flat
  ColorModeFlat = 2,
};


/// Define the error code of an error object.
SWIFT_CLASS("_TtC11YICameraSDK9ErrorCode")
@interface ErrorCode : NSObject
/// Success, not an error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t Success;)
+ (uint32_t)Success SWIFT_WARN_UNUSED_RESULT;
/// Operation has been cancelled by the user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t Cancelled;)
+ (uint32_t)Cancelled SWIFT_WARN_UNUSED_RESULT;
/// State is invalid.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t InvalidState;)
+ (uint32_t)InvalidState SWIFT_WARN_UNUSED_RESULT;
/// An IOException is raised.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t IOException;)
+ (uint32_t)IOException SWIFT_WARN_UNUSED_RESULT;
/// Parameter is invalid.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t InvalidParameter;)
+ (uint32_t)InvalidParameter SWIFT_WARN_UNUSED_RESULT;
/// Operation is not supported.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t NotSupported;)
+ (uint32_t)NotSupported SWIFT_WARN_UNUSED_RESULT;
/// The response format of the camera is invalid.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t InvalidResponse;)
+ (uint32_t)InvalidResponse SWIFT_WARN_UNUSED_RESULT;
/// Command executes failed. SubError contains detail.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t CommandFailed;)
+ (uint32_t)CommandFailed SWIFT_WARN_UNUSED_RESULT;
/// The format is invalid.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t InvalidFormat;)
+ (uint32_t)InvalidFormat SWIFT_WARN_UNUSED_RESULT;
/// Requirements are not meet.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t PreConditionFailed;)
+ (uint32_t)PreConditionFailed SWIFT_WARN_UNUSED_RESULT;
/// Timeout.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t Timeout;)
+ (uint32_t)Timeout SWIFT_WARN_UNUSED_RESULT;
/// Camera is busy. This error code is returned when the client issues a request while the camera is not in idle mode.
/// For example, this code will be returned if the client sends a set setting request while the camera is in record mode.
/// Another example is if the client requests to format the SD card during a file transfer operation.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t CameraIsBusy;)
+ (uint32_t)CameraIsBusy SWIFT_WARN_UNUSED_RESULT;
/// Reach max clients. This error indicates that the camera has reached the maximum number of simultaneous client con-nections.
/// When this error is returned, the camera cannot accept new connection requests.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t ReachMaxClients;)
+ (uint32_t)ReachMaxClients SWIFT_WARN_UNUSED_RESULT;
/// This error is returned when a handheld attempts to execute the START_SESSION command while the camera is connected to a HDMI device.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t HDMIInserted;)
+ (uint32_t)HDMIInserted SWIFT_WARN_UNUSED_RESULT;
/// This error is returned when there no more space is available in the SD card of the camera.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t NoSpace;)
+ (uint32_t)NoSpace SWIFT_WARN_UNUSED_RESULT;
/// The camera SD card currently is locked in read only mode.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t CardProtected;)
+ (uint32_t)CardProtected SWIFT_WARN_UNUSED_RESULT;
/// This error is returned when the latest command causes the camera to exhaust the available memory.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t NoMemory;)
+ (uint32_t)NoMemory SWIFT_WARN_UNUSED_RESULT;
/// This error code indicates that the Photo in Video (PIV) operation is not currently permitted.
/// This may be caused by dedicated video resolution settings or by enabling dedicated camera functions.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t PhotoInVideoIsNotAllowed;)
+ (uint32_t)PhotoInVideoIsNotAllowed SWIFT_WARN_UNUSED_RESULT;
/// This error code indicates that there is no sd card.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t SDCardIsNotExisted;)
+ (uint32_t)SDCardIsNotExisted SWIFT_WARN_UNUSED_RESULT;
/// This error code indicates that the sd card is not formated.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t SDCardIsNotFormated;)
+ (uint32_t)SDCardIsNotFormated SWIFT_WARN_UNUSED_RESULT;
/// This error code indicates that the battery is low.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t BatteryIsLow;)
+ (uint32_t)BatteryIsLow SWIFT_WARN_UNUSED_RESULT;
/// This error code indicates that the sd card capacity is low.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t SDCardCapacityIsLow;)
+ (uint32_t)SDCardCapacityIsLow SWIFT_WARN_UNUSED_RESULT;
/// This error code indicates that the bluetooth is binding now.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t BluetoothIsBinding;)
+ (uint32_t)BluetoothIsBinding SWIFT_WARN_UNUSED_RESULT;
/// This error code indicates that there is no more space for loop recording.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint32_t NoSpaceForLoopRecording;)
+ (uint32_t)NoSpaceForLoopRecording SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Contains values that specify the ExposureValue of a camera.
typedef SWIFT_ENUM(NSInteger, ExposureValue) {
/// Unknown
  ExposureValueUnknown = 0,
/// -2.0
  ExposureValueEv_negative_2 = 1,
/// -1.5
  ExposureValueEv_negative_1_point_5 = 2,
/// -1.0
  ExposureValueEv_negative_1 = 3,
/// -0.5
  ExposureValueEv_negative_0_point_5 = 4,
/// 0
  ExposureValueEv_0 = 5,
/// +0.5
  ExposureValueEv_positive_0_point_5 = 6,
/// +1.0
  ExposureValueEv_positive_1 = 7,
/// +1.5
  ExposureValueEv_positive_1_point_5 = 8,
/// +2.0
  ExposureValueEv_positive_2 = 9,
};

/// Contains values that specify the FieldOfView of a camera.
typedef SWIFT_ENUM(NSInteger, FieldOfView) {
/// Unknown
  FieldOfViewUnknown = 0,
/// Wide
  FieldOfViewWide = 1,
/// Medium
  FieldOfViewMedium = 2,
/// Narrow
  FieldOfViewNarrow = 3,
};

/// Contains values that specify the ISO of a camera.
typedef SWIFT_ENUM(NSInteger, ISO) {
/// Unknown
  ISOUnknown = 0,
/// Auto
  ISOIso_Auto = 1,
/// 100 (only used for photo)
  ISOIso_100 = 2,
/// 200 (only used for photo)
  ISOIso_200 = 3,
/// 400
  ISOIso_400 = 4,
/// 800 (only used for photo)
  ISOIso_800 = 5,
/// 1600 (only used for video)
  ISOIso_1600 = 6,
/// 6400 (only used for video)
  ISOIso_6400 = 7,
};

/// Contains values that specify the LEDMode of a camera.
typedef SWIFT_ENUM(NSInteger, LEDMode) {
/// Unknown
  LEDModeUnknown = 0,
/// AllOn
  LEDModeAllOn = 1,
/// Status Light Only
  LEDModeStatusLightOnly = 2,
/// All Off
  LEDModeAllOff = 3,
};

/// Contains values that specify the LiveVideoBitrate of a camera.
typedef SWIFT_ENUM(NSInteger, LiveVideoBitrate) {
/// Auto
  LiveVideoBitrateAuto = 0,
/// Low
  LiveVideoBitrateLow = 1,
/// Middle
  LiveVideoBitrateMiddle = 2,
/// High
  LiveVideoBitrateHigh = 3,
};

/// Contains values that specify the LiveVideoResolution of a camera.
typedef SWIFT_ENUM(NSInteger, LiveVideoResolution) {
/// 480p
  LiveVideoResolutionR_480p = 0,
/// 720p
  LiveVideoResolutionR_720p = 1,
/// 1080p
  LiveVideoResolutionR_1080p = 2,
};


/// Define the log interface.
/// App can write a subclass inherited from this class to supply log functionality.
SWIFT_CLASS("_TtC11YICameraSDK6Logger")
@interface Logger : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Output verbose level log.
/// \param message The message will be outputted at verbose level.
///
- (void)verboseWithMessage:(NSString * _Nonnull)message;
/// Output info level log.
/// \param message The message will be outputted at info level.
///
- (void)infoWithMessage:(NSString * _Nonnull)message;
/// Output warning level log.
/// \param message The message will be outputted at warning level.
///
- (void)warningWithMessage:(NSString * _Nonnull)message;
/// Output error level log.
/// \param message The message will be outputted at error level.
///
- (void)errorWithMessage:(NSString * _Nonnull)message;
@end

/// Contains values that specify the MeteringMode of a camera.
typedef SWIFT_ENUM(NSInteger, MeteringMode) {
/// Unknown
  MeteringModeUnknown = 0,
/// Center
  MeteringModeCenter = 1,
/// Average
  MeteringModeAverage = 2,
/// Spot
  MeteringModeSpot = 3,
};

/// Contains values that specify the PhotoResolution of a camera.
typedef SWIFT_ENUM(NSInteger, PhotoResolution) {
/// Unknown
  PhotoResolutionUnknown = 0,
/// Photo size is 12MP (4000x3000 4:3) fov:w
  PhotoResolutionP_12MP_4000x3000_4x3_w = 1,
/// Photo size is 7MP (3008x2256 4:3) fov:w
  PhotoResolutionP_7MP_3008x2256_4x3_w = 2,
/// Photo size is 7MP (3008x2256 4:3) fov:m
  PhotoResolutionP_7MP_3008x2256_4x3_m = 3,
/// Photo size is 5MP (2560x1920 4:3) fov:m
  PhotoResolutionP_5MP_2560x1920_4x3_m = 4,
/// Photo size is 8MP (3840x2160 16:9) fov:w
  PhotoResolutionP_8MP_3840x2160_16x9_w = 5,
};


/// This class will be used to initialize/uninitialize the whole SDK platform.
SWIFT_CLASS("_TtC11YICameraSDK8Platform")
@interface Platform : NSObject
/// Initialize SDK platform.
/// This function should only be invoked once at the app startup. App shouldn’t invoke any
/// functions before invoking this function.
/// \param logger The log interface (app need implements this interface) used by the whole
/// SDK platform. Pass <code>nil</code> will turn off the log.
///
+ (void)initializeWithLogger:(Logger * _Nullable)logger;
/// Uninitialize SDK platform.
/// This function should only be invoked once at the app ended. App shouldn’t invoke any
/// functions after invoking this function.
+ (void)uninitialize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Contains values that specify the Quality of a camera.
typedef SWIFT_ENUM(NSInteger, Quality) {
/// Unknown.
  QualityUnknown = 0,
/// Low quality.
  QualityLow = 1,
/// Middle quality.
  QualityMiddle = 2,
/// High quality.
  QualityHigh = 3,
};

/// Contains values that specify the RecordMode of a camera.
typedef SWIFT_ENUM(NSInteger, RecordMode) {
/// Unknown
  RecordModeUnknown = 0,
/// Normal
  RecordModeNormal = 1,
/// Timelapse
  RecordModeTimelapse = 2,
};

/// Contains values that specify the ScreenAutoLock of a camera.
typedef SWIFT_ENUM(NSInteger, ScreenAutoLock) {
/// Unknown
  ScreenAutoLockUnknown = 0,
/// Never
  ScreenAutoLockS_Never = 1,
/// 30
  ScreenAutoLockS_30s = 2,
/// 60
  ScreenAutoLockS_60s = 3,
/// 120
  ScreenAutoLockS_120s = 4,
};

/// Contains values that specify the Sharpness of a camera.
typedef SWIFT_ENUM(NSInteger, Sharpness) {
/// Unknown
  SharpnessUnknown = 0,
/// High
  SharpnessHigh = 1,
/// Medium
  SharpnessMedium = 2,
/// Low
  SharpnessLow = 3,
};

/// Contains values that specify the ShutterTime of a camera.
typedef SWIFT_ENUM(NSInteger, ShutterTime) {
/// Unknown
  ShutterTimeUnknown = 0,
/// Auto
  ShutterTimeSt_Auto = 1,
/// 2 seconds
  ShutterTimeSt_2s = 2,
/// 5 seconds
  ShutterTimeSt_5s = 3,
/// 10 seconds
  ShutterTimeSt_10s = 4,
/// 20 seconds
  ShutterTimeSt_20s = 5,
/// 30 seconds
  ShutterTimeSt_30s = 6,
};

/// Contains values that specify the SystemMode of a camera.
typedef SWIFT_ENUM(NSInteger, SystemMode) {
/// Unknown.
  SystemModeUnknown = 0,
/// Video mode.
  SystemModeRecord = 1,
/// Picture mode.
  SystemModeCapture = 2,
};

/// Contains values that specify the TimeLapsePhotoInterval of a camera.
typedef SWIFT_ENUM(NSInteger, TimeLapsePhotoInterval) {
/// Unknown
  TimeLapsePhotoIntervalUnknown = 0,
/// Continue;
  TimeLapsePhotoIntervalT_Continue = 1,
/// 0.5s
  TimeLapsePhotoIntervalT_0_5s = 2,
/// 1s
  TimeLapsePhotoIntervalT_1s = 3,
/// 2s
  TimeLapsePhotoIntervalT_2s = 4,
/// 5s
  TimeLapsePhotoIntervalT_5s = 5,
/// 10s
  TimeLapsePhotoIntervalT_10s = 6,
/// 30s
  TimeLapsePhotoIntervalT_30s = 7,
/// 60s
  TimeLapsePhotoIntervalT_60s = 8,
/// 2m
  TimeLapsePhotoIntervalT_2m = 9,
/// 5m
  TimeLapsePhotoIntervalT_5m = 10,
/// 10m
  TimeLapsePhotoIntervalT_10m = 11,
/// 30m
  TimeLapsePhotoIntervalT_30m = 12,
/// 60m
  TimeLapsePhotoIntervalT_60m = 13,
};

/// Contains values that specify the TimeLapseVideoDuration of a camera.
typedef SWIFT_ENUM(NSInteger, TimeLapseVideoDuration) {
/// Unknown
  TimeLapseVideoDurationUnknown = 0,
/// Off;
  TimeLapseVideoDurationT_Off = 1,
/// 6s
  TimeLapseVideoDurationT_6s = 2,
/// 8s
  TimeLapseVideoDurationT_8s = 3,
/// 10s
  TimeLapseVideoDurationT_10s = 4,
/// 20s
  TimeLapseVideoDurationT_20s = 5,
/// 30s
  TimeLapseVideoDurationT_30s = 6,
/// 60s
  TimeLapseVideoDurationT_60s = 7,
/// 120s
  TimeLapseVideoDurationT_120s = 8,
};

/// Contains values that specify the TimeLapseVideoInterval of a camera.
typedef SWIFT_ENUM(NSInteger, TimeLapseVideoInterval) {
/// Unknown
  TimeLapseVideoIntervalUnknown = 0,
/// 0.5s
  TimeLapseVideoIntervalT_0_5s = 1,
/// 1s
  TimeLapseVideoIntervalT_1s = 2,
/// 2s
  TimeLapseVideoIntervalT_2s = 3,
/// 5s
  TimeLapseVideoIntervalT_5s = 4,
/// 10s
  TimeLapseVideoIntervalT_10s = 5,
/// 30s
  TimeLapseVideoIntervalT_30s = 6,
/// 60s
  TimeLapseVideoIntervalT_60s = 7,
};

/// Contains values that specify the Timestamp of a camera.
typedef SWIFT_ENUM(NSInteger, Timestamp) {
/// Unknown
  TimestampUnknown = 0,
/// Off
  TimestampOff = 1,
/// Time
  TimestampTime = 2,
/// Date
  TimestampDate = 3,
/// Date and time;
  TimestampDateAndTime = 4,
};

/// Contains values that specify the ToggleState of a camera.
typedef SWIFT_ENUM(NSInteger, ToggleState) {
/// Unknown
  ToggleStateUnknown = 0,
/// Enabled
  ToggleStateOn = 1,
/// Disabled
  ToggleStateOff = 2,
};

/// Contains values that specify the VideoResolution of a camera.
typedef SWIFT_ENUM(NSInteger, VideoResolution) {
/// Unknown
  VideoResolutionUnknown = 0,
/// Resolution is 3840x1260 30P 16:9.
  VideoResolutionV_3840x2160_30p_16x9 = 1,
/// Resolution is 3840x2160 30P 16:9 super.
  VideoResolutionV_3840x2160_30p_16x9_super = 2,
/// Resolution is 2560x1920 30P 4:3.
  VideoResolutionV_2560x1920_30p_4x3 = 3,
/// Resolution is 1920x1440 60P 4:3.
  VideoResolutionV_1920x1440_60p_4x3 = 4,
/// Resolution is 1920x1440 30P 4:3.
  VideoResolutionV_1920x1440_30p_4x3 = 5,
/// Resolution is 1920x1080 120P 16:9.
  VideoResolutionV_1920x1080_120p_16x9 = 6,
/// Resolution is 1920x1080 120P 16:9 super.
  VideoResolutionV_1920x1080_120p_16x9_super = 7,
/// Resolution is 1920x1080 60P 16:9.
  VideoResolutionV_1920x1080_60p_16x9 = 8,
/// Resolution is 1920x1080 60P 16:9 super.
  VideoResolutionV_1920x1080_60p_16x9_super = 9,
/// Resolution is 1920x1080 30P 16:9.
  VideoResolutionV_1920x1080_30p_16x9 = 10,
/// Resolution is 1920x1080 30P 16:9 super.
  VideoResolutionV_1920x1080_30p_16x9_super = 11,
/// Resolution is 1280x960 120P 4:3.
  VideoResolutionV_1280x960_120p_4x3 = 12,
/// Resolution is 1280x960 60P 4:3.
  VideoResolutionV_1280x960_60P_4x3 = 13,
/// Resolution is 1280x720 240P 16:9.
  VideoResolutionV_1280x720_240p_16x9 = 14,
/// Resolution is 1280x720 120P 16:9 super.
  VideoResolutionV_1280x720_120p_16x9_super = 15,
/// Resolution is 1280x720 60P 16:9 super.
  VideoResolutionV_1280x720_60p_16x9_super = 16,
/// Resolution is 840x480 240P 16:9.
  VideoResolutionV_840x480_120p_16x9 = 17,
};

/// Contains values that specify the VideoRotateMode of a camera.
typedef SWIFT_ENUM(NSInteger, VideoRotateMode) {
/// Unknown
  VideoRotateModeUnknown = 0,
/// Off
  VideoRotateModeOff = 1,
/// On
  VideoRotateModeOn = 2,
/// Auto
  VideoRotateModeAuto = 3,
};

/// Contains values that specify the VideoStandard of a camera.
typedef SWIFT_ENUM(NSInteger, VideoStandard) {
/// Unknown
  VideoStandardUnknown = 0,
/// PAL standard
  VideoStandardPAL = 1,
/// NTSC standard
  VideoStandardNTSC = 2,
};

/// Contains values that specify the WhiteBalance of a camera.
typedef SWIFT_ENUM(NSInteger, WhiteBalance) {
/// Unknown
  WhiteBalanceUnknown = 0,
/// Auto
  WhiteBalanceAuto = 1,
/// Native
  WhiteBalanceNative = 2,
/// Tungsten
  WhiteBalanceTungsten = 3,
/// Daylight
  WhiteBalanceDaylight = 4,
/// Cloudy
  WhiteBalanceCloudy = 5,
};


/// Define the interface of message loop.
/// App need implement this interface and runs a message loop to process the message/task one by one.
/// All callback will be invoked from this queue.
SWIFT_PROTOCOL("_TtP11YICameraSDK24YICameraSDKDispatchQueue_")
@protocol YICameraSDKDispatchQueue
/// Put a task to the queue.
/// <em>Note: This method must be thread safe and <code>task</code> must be executed out of current call stack.</em>
/// \param task The task will be executed from the message loop.
///
- (void)dispatchWithTask:(void (^ _Nonnull)(void))task;
@end


/// Represent the error.
SWIFT_CLASS("_TtC11YICameraSDK16YICameraSDKError")
@interface YICameraSDKError : NSObject
/// Get the error code.
- (uint32_t)getCode SWIFT_WARN_UNUSED_RESULT;
/// Get the sub error.
- (NSError * _Nullable)getSubError SWIFT_WARN_UNUSED_RESULT;
/// Get the detail information of error.
- (NSString * _Nullable)getDetail SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
